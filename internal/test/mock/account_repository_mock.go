// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/account/account_repository_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/account/account_repository_interface.go -destination=internal/test/mock/account_repository_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/silasstoffel/account-service/internal/domain/account"
	gomock "go.uber.org/mock/gomock"
)

// MockReadOneAccountRepository is a mock of ReadOneAccountRepository interface.
type MockReadOneAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReadOneAccountRepositoryMockRecorder
}

// MockReadOneAccountRepositoryMockRecorder is the mock recorder for MockReadOneAccountRepository.
type MockReadOneAccountRepositoryMockRecorder struct {
	mock *MockReadOneAccountRepository
}

// NewMockReadOneAccountRepository creates a new mock instance.
func NewMockReadOneAccountRepository(ctrl *gomock.Controller) *MockReadOneAccountRepository {
	mock := &MockReadOneAccountRepository{ctrl: ctrl}
	mock.recorder = &MockReadOneAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOneAccountRepository) EXPECT() *MockReadOneAccountRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockReadOneAccountRepository) FindById(accountId string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", accountId)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockReadOneAccountRepositoryMockRecorder) FindById(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockReadOneAccountRepository)(nil).FindById), accountId)
}

// MockReadAccountRepository is a mock of ReadAccountRepository interface.
type MockReadAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReadAccountRepositoryMockRecorder
}

// MockReadAccountRepositoryMockRecorder is the mock recorder for MockReadAccountRepository.
type MockReadAccountRepositoryMockRecorder struct {
	mock *MockReadAccountRepository
}

// NewMockReadAccountRepository creates a new mock instance.
func NewMockReadAccountRepository(ctrl *gomock.Controller) *MockReadAccountRepository {
	mock := &MockReadAccountRepository{ctrl: ctrl}
	mock.recorder = &MockReadAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadAccountRepository) EXPECT() *MockReadAccountRepositoryMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockReadAccountRepository) FindByEmail(email string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockReadAccountRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockReadAccountRepository)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockReadAccountRepository) FindById(accountId string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", accountId)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockReadAccountRepositoryMockRecorder) FindById(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockReadAccountRepository)(nil).FindById), accountId)
}

// FindByPhone mocks base method.
func (m *MockReadAccountRepository) FindByPhone(phone string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", phone)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockReadAccountRepositoryMockRecorder) FindByPhone(phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockReadAccountRepository)(nil).FindByPhone), phone)
}

// List mocks base method.
func (m *MockReadAccountRepository) List(input domain.ListAccountInput) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", input)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReadAccountRepositoryMockRecorder) List(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReadAccountRepository)(nil).List), input)
}

// MockWriteAccountRepository is a mock of WriteAccountRepository interface.
type MockWriteAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWriteAccountRepositoryMockRecorder
}

// MockWriteAccountRepositoryMockRecorder is the mock recorder for MockWriteAccountRepository.
type MockWriteAccountRepositoryMockRecorder struct {
	mock *MockWriteAccountRepository
}

// NewMockWriteAccountRepository creates a new mock instance.
func NewMockWriteAccountRepository(ctrl *gomock.Controller) *MockWriteAccountRepository {
	mock := &MockWriteAccountRepository{ctrl: ctrl}
	mock.recorder = &MockWriteAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteAccountRepository) EXPECT() *MockWriteAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriteAccountRepository) Create(account domain.Account) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", account)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWriteAccountRepositoryMockRecorder) Create(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriteAccountRepository)(nil).Create), account)
}

// Update mocks base method.
func (m *MockWriteAccountRepository) Update(id string, data domain.Account) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, data)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWriteAccountRepositoryMockRecorder) Update(id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriteAccountRepository)(nil).Update), id, data)
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepository) Create(account domain.Account) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", account)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), account)
}

// FindByEmail mocks base method.
func (m *MockAccountRepository) FindByEmail(email string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockAccountRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockAccountRepository)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockAccountRepository) FindById(accountId string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", accountId)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockAccountRepositoryMockRecorder) FindById(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockAccountRepository)(nil).FindById), accountId)
}

// FindByPhone mocks base method.
func (m *MockAccountRepository) FindByPhone(phone string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", phone)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockAccountRepositoryMockRecorder) FindByPhone(phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockAccountRepository)(nil).FindByPhone), phone)
}

// List mocks base method.
func (m *MockAccountRepository) List(input domain.ListAccountInput) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", input)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccountRepositoryMockRecorder) List(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountRepository)(nil).List), input)
}

// Update mocks base method.
func (m *MockAccountRepository) Update(id string, data domain.Account) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, data)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountRepositoryMockRecorder) Update(id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRepository)(nil).Update), id, data)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/account/account_permission_repository_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/account/account_permission_repository_interface.go -destination=internal/test/mock/account_permission_repository_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/silasstoffel/account-service/internal/domain/account"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountPermissionReadRepository is a mock of AccountPermissionReadRepository interface.
type MockAccountPermissionReadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountPermissionReadRepositoryMockRecorder
}

// MockAccountPermissionReadRepositoryMockRecorder is the mock recorder for MockAccountPermissionReadRepository.
type MockAccountPermissionReadRepositoryMockRecorder struct {
	mock *MockAccountPermissionReadRepository
}

// NewMockAccountPermissionReadRepository creates a new mock instance.
func NewMockAccountPermissionReadRepository(ctrl *gomock.Controller) *MockAccountPermissionReadRepository {
	mock := &MockAccountPermissionReadRepository{ctrl: ctrl}
	mock.recorder = &MockAccountPermissionReadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountPermissionReadRepository) EXPECT() *MockAccountPermissionReadRepositoryMockRecorder {
	return m.recorder
}

// FindByAccountId mocks base method.
func (m *MockAccountPermissionReadRepository) FindByAccountId(accountId string) ([]domain.AccountPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountId", accountId)
	ret0, _ := ret[0].([]domain.AccountPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountId indicates an expected call of FindByAccountId.
func (mr *MockAccountPermissionReadRepositoryMockRecorder) FindByAccountId(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountId", reflect.TypeOf((*MockAccountPermissionReadRepository)(nil).FindByAccountId), accountId)
}

// MockAccountPermissionWriteRepository is a mock of AccountPermissionWriteRepository interface.
type MockAccountPermissionWriteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountPermissionWriteRepositoryMockRecorder
}

// MockAccountPermissionWriteRepositoryMockRecorder is the mock recorder for MockAccountPermissionWriteRepository.
type MockAccountPermissionWriteRepositoryMockRecorder struct {
	mock *MockAccountPermissionWriteRepository
}

// NewMockAccountPermissionWriteRepository creates a new mock instance.
func NewMockAccountPermissionWriteRepository(ctrl *gomock.Controller) *MockAccountPermissionWriteRepository {
	mock := &MockAccountPermissionWriteRepository{ctrl: ctrl}
	mock.recorder = &MockAccountPermissionWriteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountPermissionWriteRepository) EXPECT() *MockAccountPermissionWriteRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountPermissionWriteRepository) Create(data domain.CreateAccountPermissionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountPermissionWriteRepositoryMockRecorder) Create(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountPermissionWriteRepository)(nil).Create), data)
}

// DeleteByAccount mocks base method.
func (m *MockAccountPermissionWriteRepository) DeleteByAccount(accountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByAccount", accountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByAccount indicates an expected call of DeleteByAccount.
func (mr *MockAccountPermissionWriteRepositoryMockRecorder) DeleteByAccount(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByAccount", reflect.TypeOf((*MockAccountPermissionWriteRepository)(nil).DeleteByAccount), accountId)
}

// MockAccountPermissionRepository is a mock of AccountPermissionRepository interface.
type MockAccountPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountPermissionRepositoryMockRecorder
}

// MockAccountPermissionRepositoryMockRecorder is the mock recorder for MockAccountPermissionRepository.
type MockAccountPermissionRepositoryMockRecorder struct {
	mock *MockAccountPermissionRepository
}

// NewMockAccountPermissionRepository creates a new mock instance.
func NewMockAccountPermissionRepository(ctrl *gomock.Controller) *MockAccountPermissionRepository {
	mock := &MockAccountPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockAccountPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountPermissionRepository) EXPECT() *MockAccountPermissionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountPermissionRepository) Create(data domain.CreateAccountPermissionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountPermissionRepositoryMockRecorder) Create(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountPermissionRepository)(nil).Create), data)
}

// DeleteByAccount mocks base method.
func (m *MockAccountPermissionRepository) DeleteByAccount(accountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByAccount", accountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByAccount indicates an expected call of DeleteByAccount.
func (mr *MockAccountPermissionRepositoryMockRecorder) DeleteByAccount(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByAccount", reflect.TypeOf((*MockAccountPermissionRepository)(nil).DeleteByAccount), accountId)
}

// FindByAccountId mocks base method.
func (m *MockAccountPermissionRepository) FindByAccountId(accountId string) ([]domain.AccountPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountId", accountId)
	ret0, _ := ret[0].([]domain.AccountPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountId indicates an expected call of FindByAccountId.
func (mr *MockAccountPermissionRepositoryMockRecorder) FindByAccountId(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountId", reflect.TypeOf((*MockAccountPermissionRepository)(nil).FindByAccountId), accountId)
}

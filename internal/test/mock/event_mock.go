// Code generated by MockGen. DO NOT EDIT.
// Source: internal/event/event.go
//
// Generated by this command:
//
//	mockgen -source=internal/event/event.go -destination=internal/test/mock/event_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	event "github.com/silasstoffel/account-service/internal/event"
	gomock "go.uber.org/mock/gomock"
)

// MockEventProducer is a mock of EventProducer interface.
type MockEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockEventProducerMockRecorder
}

// MockEventProducerMockRecorder is the mock recorder for MockEventProducer.
type MockEventProducerMockRecorder struct {
	mock *MockEventProducer
}

// NewMockEventProducer creates a new mock instance.
func NewMockEventProducer(ctrl *gomock.Controller) *MockEventProducer {
	mock := &MockEventProducer{ctrl: ctrl}
	mock.recorder = &MockEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventProducer) EXPECT() *MockEventProducerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventProducer) Publish(eventType string, data any, source string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", eventType, data, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventProducerMockRecorder) Publish(eventType, data, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventProducer)(nil).Publish), eventType, data, source)
}

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventRepository) Create(event event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEventRepositoryMockRecorder) Create(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventRepository)(nil).Create), event)
}
